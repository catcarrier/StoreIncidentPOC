<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_script_include">
    <sys_script_include action="INSERT_OR_UPDATE">
        <access>package_private</access>
        <active>true</active>
        <api_name>x_42999_store_inc.IncidentUtils</api_name>
        <caller_access/>
        <client_callable>false</client_callable>
        <description/>
        <name>IncidentUtils</name>
        <script><![CDATA[var IncidentUtils = Class.create();
IncidentUtils.prototype = {
    initialize: function() {
		this.INCIDENT_LOCATION          = "u_event_location";
		this.INCIDENT_STATE             = "u_state";
		this.INCIDENT_INCOMPLETE_STATES = ["DRAFT","FAILED"];
	},

	getUserLocation: function() {
		var sys_id = gs.getUserID();
		var gr = new GlideRecord("sys_user");
		gr.get('sys_id', sys_id);
		var value = gr.getValue("location");	
		return value;
	},
	
	standardIncidentActionAllow: function(incident) {
		var location = this.getUserLocation();
		var condition1 = this.INCIDENT_INCOMPLETE_STATES.indexOf( incident.getValue(this.INCIDENT_STATE) ) > -1;
		var condition2 = (incident.getValue(this.INCIDENT_LOCATION) == location);
		return condition1 && condition1;
	},
	
	standardChildActionAllow: function(child) {
		var sys_id = child.u_parent;
		var gr = new GlideRecord("x_42999_store_inc_incident");
		var flag = gr.get(sys_id);
		if( !flag ) return false; // parent no longer exists
		return this.standardIncidentActionAllow(gr);
	},
	
	allowEditIncident: function(incident) {
		
		//TODO
		
	},
	
	allowDeleteIncident: function(incident) {
		//TODO
	},
	
    allowAddSuspect: function(incident) {
		return this.standardIncidentActionAllow(incident);
    },
	
	allowEditSuspect: function(suspect) {
		return this.standardChildActionAllow(suspect);
    },
	
    allowDeleteSuspect: function(suspect) {
        return this.standardChildActionAllow(suspect);
    },
	
	allowAddVehicle: function(incident) {
        return this.standardIncidentActionAllow(incident);
    },
	
	allowEditVehicle: function(vehicle) {
		return this.standardChildActionAllow(vehicle);
    },
	
    allowDeleteVehicle: function(vehicle) {
        return this.standardChildActionAllow(vehicle);
    },
	
	allowAddPolice: function(incident) {
        return this.standardIncidentActionAllow(incident);
    },
	
	allowEditPolice: function(police) {
       return this.standardChildActionAllow(police);
    },
	
    allowDeletePolice: function(police) {
        return this.standardChildActionAllow(police);
    },
	
	allowAddWitness: function(incident) {
        return this.standardIncidentActionAllow(incident);
    },
	
	allowEditWitness: function(witness) {
       return this.standardChildActionAllow(witness);
    },
	
    allowDeleteWitness: function(witness) {
        return this.standardChildActionAllow(witness);
    },
	
	allowAddSKU: function(incident) {
        return this.standardIncidentActionAllow(incident);
    },
	
	allowEditSKU: function(sku) {
       return this.standardChildActionAllow(sku);
    },
	
	allowDeleteSKU: function(sku) {
        return this.standardChildActionAllow(sku);
    },
	
    allowCopySKU: function(sku) {
        return this.standardChildActionAllow(sku);
    },

    getMyLocationSysID: function() {
        var user_sys_id = gs.getUserID();
        var gr = new GlideRecord('sys_user');
        gr.get('sys_id', user_sys_id);
        return gr.getValue('location');
    },

    // return true if the current user is the author of this incident
    isAuthor: function(gr) {
        if (!gr) return false;
        var author = gr.getValue('u_author');
        return gs.getUserID() == author;
    },

    // TODO if the user's location is not empty but also is not like STRnnnn,
    //      but the user's name matches /store[\d]+/, check for locations matching
    //      the digits in the user's name and compare their sys_ids to the location sys_id.
    //      This will work around cases where the user's location is something other
    //      than a store (ex: 'Katy')

    // return true if the incident is for the current user's location. These
    // caveats apply:
    //   -- returns false if incident location is empty
    //   -- returns false if the user's location is empty
    //   -- location (cmn_location) data is messy (there are duplicate locations)
    //   -- some store users' locations are blank or are not store locations ('Katy' 
    //      instead of 'STR0033')
    // So we may not stop with comparing the user's location with the location
    // in the incident.
    isMyStoreIncident: function(incident) {

        var incident_location = incident.getValue('u_location');

        gs.info("incident_location: " + incident_location);

        if (!incident_location) return false;

        // get the user's location
        var user_sys_id = gs.getUserID();
        var gr = new GlideRecord('sys_user');
        gr.get('sys_id', user_sys_id);
        var user_location = gr.getValue('location');

        gs.info('user location: ' + user_location);

        // If user has no location return false
        if (!user_location) return false;

        return user_location == incident_location;
    },

    type: 'IncidentUtils'
};]]></script>
        <sys_class_name>sys_script_include</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2020-10-13 15:10:02</sys_created_on>
        <sys_id>9d986f8a2f3310109e9157892799b6c7</sys_id>
        <sys_mod_count>43</sys_mod_count>
        <sys_name>IncidentUtils</sys_name>
        <sys_package display_value="Store Incidents POC" source="x_42999_store_inc">4823ba6b2f2310109e9157892799b604</sys_package>
        <sys_policy>read</sys_policy>
        <sys_scope display_value="Store Incidents POC">4823ba6b2f2310109e9157892799b604</sys_scope>
        <sys_update_name>sys_script_include_9d986f8a2f3310109e9157892799b6c7</sys_update_name>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2020-10-14 18:50:11</sys_updated_on>
    </sys_script_include>
</record_update>
